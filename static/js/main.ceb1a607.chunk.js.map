{"version":3,"sources":["utils/shuffle.js","questions/MutipleChoice.jsx","questions/ClassicQuestion.jsx","questions/MusicalQuestion.jsx","App.jsx","index.js"],"names":["shuffle","arrayToShuffle","shuffleArray","Object","toConsumableArray","i","length","j","Math","floor","random","_ref","MutipleChoice","challenge","onAnswer","question","answer","others","options","concat","react_default","a","createElement","className","map","x","key","onClick","ClassicQuestion","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","submittedAnswer","handleInputChange","event","target","value","type","checked","name","setState","defineProperty","handleKeyPressed","submitAnswer","_this$props","props","toLowerCase","inherits","createClass","autoFocus","onChange","onKeyPress","Component","MusicalQuestion","_this$props$challenge","fileName","autoPlay","src","numberOfQuestion","successThreshold","timeOut","App","currentQuestionIndex","sucessCount","questions","reset","quiz","multipleQuestions","multiple","objectSpread","push","classicQuestions","classic","musicalQuestions","musical","slice","handleAnswer","hasSucceed","toast","success","position","POSITION","TOP_CENTER","autoClose","error","prevState","retry","renderQuestion","MutipleChoice_MutipleChoice","ClassicQuestion_ClassicQuestion","MusicalQuestion_MusicalQuestion","renderHeader","onTimeOut","renderMain","_this$state","remainingQuestion","missingPoint","currentQuestion","react_countdown_clock_default","seconds","color","alpha","size","onComplete","lib","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ceb1a607.chunk.js","sourcesContent":["export const shuffle = arrayToShuffle => {\r\n    const shuffleArray = [...arrayToShuffle];\r\n\r\n    for (let i = shuffleArray.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [shuffleArray[i], shuffleArray[j]] = [shuffleArray[j], shuffleArray[i]];\r\n    }\r\n    return shuffleArray;\r\n};\r\n","import React from \"react\";\r\nimport { shuffle } from \"../utils/shuffle\";\r\n\r\nexport const MutipleChoice = ({ challenge, onAnswer }) => {\r\n    const { question, answer, others } = challenge;\r\n\r\n    const options = shuffle([answer, ...others]);\r\n\r\n    function submitAnswer(choosenOption) {\r\n        onAnswer(choosenOption === answer);\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-column items-center\">\r\n            <h2>Catégorie: Choix de réponse</h2>\r\n            <div className=\"flex flex-column items-center\">\r\n                <h3 className=\"mw7\">{question}</h3>\r\n                <div className=\"flex flex-column flex-wrap mw6 items-center\">\r\n                    {options.map(x => (\r\n                        <button\r\n                            key={x}\r\n                            onClick={() => submitAnswer(x)}\r\n                            className=\"f5 link dim ba ph3 pv2 mb2 dib light-green bg-dark-gray w5\"\r\n                        >\r\n                            {x}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport class ClassicQuestion extends Component {\r\n    state = {\r\n        submittedAnswer: \"\",\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const target = event.target;\r\n        const value =\r\n            target.type === \"checkbox\" ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleKeyPressed = event => {\r\n        if (event.key === \"Enter\") {\r\n            this.submitAnswer();\r\n        }\r\n    };\r\n\r\n    submitAnswer = () => {\r\n        const { submittedAnswer } = this.state;\r\n        const { challenge, onAnswer } = this.props;\r\n\r\n        if (submittedAnswer === \"\") {\r\n            return;\r\n        }\r\n\r\n        const isValid =\r\n            challenge.answer.toLowerCase() === submittedAnswer.toLowerCase();\r\n\r\n        onAnswer(isValid);\r\n        this.setState({ submittedAnswer: \"\" });\r\n    };\r\n\r\n    render() {\r\n        const { question } = this.props.challenge;\r\n\r\n        return (\r\n            <div className=\"flex flex-column items-center\">\r\n                <h2>Catégorie: Question Classique</h2>\r\n                <div className=\"flex flex-column items-center\">\r\n                    <h3 className=\"mw7\">{question}</h3>\r\n                    <label className=\"mb3\">\r\n                        <span className=\"mr2\">Réponse:</span>\r\n                        <input\r\n                            autoFocus\r\n                            name=\"submittedAnswer\"\r\n                            type=\"text\"\r\n                            value={this.state.submittedAnswer}\r\n                            onChange={this.handleInputChange}\r\n                            onKeyPress={this.handleKeyPressed}\r\n                        />\r\n                    </label>\r\n                    <button\r\n                        className=\"f6 link dim ba ph3 pv2 mb2 dib light-green bg-dark-gray\"\r\n                        onClick={this.submitAnswer}\r\n                    >\r\n                        Soumettre la réponse\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class MusicalQuestion extends Component {\r\n    state = {\r\n        submittedAnswer: \"\",\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const target = event.target;\r\n        const value =\r\n            target.type === \"checkbox\" ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleKeyPressed = event => {\r\n        if (event.key === \"Enter\") {\r\n            this.submitAnswer();\r\n        }\r\n    };\r\n\r\n    submitAnswer = () => {\r\n        const { submittedAnswer } = this.state;\r\n        const { challenge, onAnswer } = this.props;\r\n\r\n        if (submittedAnswer === \"\") {\r\n            return;\r\n        }\r\n\r\n        const isValid =\r\n            challenge.answer.toLowerCase() === submittedAnswer.toLowerCase();\r\n\r\n        onAnswer(isValid);\r\n        this.setState({ submittedAnswer: \"\" });\r\n    };\r\n\r\n    render() {\r\n        const { question, fileName } = this.props.challenge;\r\n\r\n        return (\r\n            <div className=\"flex flex-column items-center\">\r\n                <h2>Catégorie: Question musical</h2>\r\n                <div className=\"flex flex-column items-center\">\r\n                    <h3 className=\"mw7\">{question}</h3>\r\n                    <label className=\"mb3\">\r\n                        <span className=\"mr2\">Réponse:</span>\r\n                        <input\r\n                            autoFocus\r\n                            name=\"submittedAnswer\"\r\n                            type=\"text\"\r\n                            value={this.state.submittedAnswer}\r\n                            onChange={this.handleInputChange}\r\n                            onKeyPress={this.handleKeyPressed}\r\n                        />\r\n                        <audio autoPlay src={`./playlist/${fileName}`} />\r\n                    </label>\r\n                    <button\r\n                        className=\"f6 link dim ba ph3 pv2 mb2 dib light-green bg-dark-gray\"\r\n                        onClick={this.submitAnswer}\r\n                    >\r\n                        Soumettre la réponse\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport ReactCountdownClock from \"react-countdown-clock\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport multiple from \"./data/multipleChoice.json\";\r\nimport classic from \"./data/classicQuestion.json\";\r\nimport musical from \"./data/musical.json\";\r\nimport { shuffle } from \"./utils/shuffle.js\";\r\nimport { MutipleChoice } from \"./questions/MutipleChoice.jsx\";\r\nimport { ClassicQuestion } from \"./questions/ClassicQuestion.jsx\";\r\nimport { MusicalQuestion } from \"./questions/MusicalQuestion.jsx\";\r\n\r\nconst numberOfQuestion = 20;\r\nconst successThreshold = 16;\r\nconst timeOut = 30;\r\n\r\nclass App extends Component {\r\n    state = {\r\n        currentQuestionIndex: -1,\r\n        sucessCount: 0,\r\n        questions: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.reset();\r\n    }\r\n\r\n    reset = () => {\r\n        const quiz = [];\r\n\r\n        const multipleQuestions = multiple.map(x => ({\r\n            type: \"multiple\",\r\n            ...x,\r\n        }));\r\n        quiz.push(...multipleQuestions);\r\n\r\n        const classicQuestions = classic.map(x => ({\r\n            type: \"classic\",\r\n            ...x,\r\n        }));\r\n        quiz.push(...classicQuestions);\r\n\r\n        const musicalQuestions = musical.map(x => ({\r\n            type: \"musical\",\r\n            ...x,\r\n        }));\r\n        quiz.push(...musicalQuestions);\r\n\r\n        this.setState({\r\n            currentQuestionIndex: 0,\r\n            sucessCount: 0,\r\n            questions: shuffle(quiz).slice(1, numberOfQuestion + 1),\r\n        });\r\n    };\r\n\r\n    handleAnswer = hasSucceed => {\r\n        if (hasSucceed) {\r\n            toast.success(\"Bonne réponse!\", {\r\n                position: toast.POSITION.TOP_CENTER,\r\n                autoClose: 2000,\r\n            });\r\n        } else {\r\n            toast.error(\"Wrong!\", {\r\n                position: toast.POSITION.TOP_CENTER,\r\n                autoClose: 2000,\r\n            });\r\n        }\r\n\r\n        this.setState(prevState => {\r\n            return {\r\n                currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n                sucessCount: hasSucceed\r\n                    ? prevState.sucessCount + 1\r\n                    : prevState.sucessCount,\r\n            };\r\n        });\r\n    };\r\n\r\n    retry = () => {\r\n        this.reset();\r\n    };\r\n\r\n    renderQuestion = question => {\r\n        switch (question.type) {\r\n            case \"multiple\":\r\n                return (\r\n                    <MutipleChoice\r\n                        challenge={question}\r\n                        onAnswer={this.handleAnswer}\r\n                    />\r\n                );\r\n\r\n            case \"classic\":\r\n                return (\r\n                    <ClassicQuestion\r\n                        challenge={question}\r\n                        onAnswer={this.handleAnswer}\r\n                    />\r\n                );\r\n\r\n            case \"musical\":\r\n                return (\r\n                    <MusicalQuestion\r\n                        challenge={question}\r\n                        onAnswer={this.handleAnswer}\r\n                    />\r\n                );\r\n\r\n            default:\r\n                return <div>Uh uh not supported {question.type}</div>;\r\n        }\r\n    };\r\n\r\n    renderHeader = () => {\r\n        return (\r\n            <h1 className=\"flex flex-column items-center\">\r\n                Fête de Maud 2018!!!\r\n            </h1>\r\n        );\r\n    };\r\n\r\n    onTimeOut = () => {\r\n        toast.error(\"Time out!\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 2000,\r\n        });\r\n\r\n        this.setState(prevState => {\r\n            return {\r\n                currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            };\r\n        });\r\n    };\r\n\r\n    renderMain = () => {\r\n        const { currentQuestionIndex, questions, sucessCount } = this.state;\r\n\r\n        if (currentQuestionIndex < 0) {\r\n            return (\r\n                <div>\r\n                    <main>Loading Data...</main>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (sucessCount === successThreshold) {\r\n            return (\r\n                <div>\r\n                    <main>\r\n                        Le cadeau se trouve dans le tas de papier de toilette.\r\n                    </main>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const remainingQuestion = questions.length - currentQuestionIndex;\r\n        const missingPoint = successThreshold - sucessCount;\r\n        if (\r\n            currentQuestionIndex === questions.length ||\r\n            remainingQuestion < missingPoint\r\n        ) {\r\n            return (\r\n                <div className=\"flex flex-column items-center \">\r\n                    <main className=\"f3 fw8 mb3 dark-red\">Wrong! 🎵</main>\r\n                    <audio autoPlay src={`./playlist/wrong.mp3`} />\r\n                    <button\r\n                        className=\"f6 link dim ba ph3 pv2 mb2 dib light-green bg-dark-gray\"\r\n                        onClick={this.retry}\r\n                    >\r\n                        Ré-essayer\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const currentQuestion = questions[currentQuestionIndex];\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <span className=\"db f6 gray\">\r\n                        Questions: {currentQuestionIndex + 1}/{questions.length}\r\n                    </span>\r\n                    <span className=\"db f6 gray\">\r\n                        Réponses requises: {sucessCount}/{successThreshold}\r\n                    </span>\r\n                </div>\r\n                <div className=\"flex flex-column items-center mt3\">\r\n                    <div key={currentQuestionIndex}>\r\n                        <ReactCountdownClock\r\n                            seconds={timeOut}\r\n                            color=\"#7000a0\"\r\n                            alpha={0.9}\r\n                            size={100}\r\n                            onComplete={this.onTimeOut}\r\n                        />\r\n                    </div>\r\n                    {this.renderQuestion(currentQuestion)}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flex flex-column items-center\">\r\n                <div className=\"flex flex-column bg-light-green br3 pa3 mt5\">\r\n                    <header>{this.renderHeader()}</header>\r\n                    <main>{this.renderMain()}</main>\r\n                </div>\r\n                <ToastContainer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}